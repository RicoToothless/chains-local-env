version: '2'

services:
  #  westend-validator:
  #    image: parity/polkadot:v0.9.9
  #    ports:
  #      - 30333:30333 # p2p port
  #      - 9615:9615   # prometheus metrics port
  #      - 9933:9933 # rpc port
  #      - 9944:9944 # ws port
  #    volumes:
  #      - ./polkadot/:/polkadot/
  #    command: [
  #      '--name', 'boring-westend-validator',
  #      '--telemetry-url', 'ws://telemetry-backend-shard:8001/submit 0',
  #      '--unsafe-rpc-external',
  #      '--rpc-methods=Unsafe',
  #      '--ws-external',
  #      '--rpc-cors', 'all',
  #      '--chain', 'westend',
  #      '--pruning', 'archive',
  #      '--validator'
  #    ]
  polkadot-watcher:
    image: web3f/polkadot-watcher:v3.2.2
    ports:
      - 3002:3000
    volumes:
      - ./polkadot-watcher/config:/app/config
    restart: always
        #  polkadotui:
        #    image: jacogr/polkadot-js-apps:latest
        #    environment:
        #      WS_URL: ws://localhost:9944
        #    ports:
        #      - 8888:80
        #  telemetry-frontend:
        #    image: parity/substrate-telemetry-frontend:05f165e1
        #    #    read_only: true
        #    tmpfs:
        #      - /var/cache/nginx:uid=101,gid=101
        #      - /var/run:uid=101,gid=101
        #      - /app/tmp:uid=101,gid=101
        #    environment:
        #      SUBSTRATE_TELEMETRY_URL: ws://localhost:8000/feed/
        #    ports:
        #      - 3000:8000
        #    expose:
        #      - 3000
        #  telemetry-backend-shard:
        #    image: parity/substrate-telemetry-backend:05f165e1
        #    read_only: true
        #    command: [
        #      'telemetry_shard',
        #      '--listen', '0.0.0.0:8001',
        #      '--core', 'http://telemetry-backend-core:8000/shard_submit'
        #    ]
        #    ports:
        #      - 8001:8001
        #    expose:
        #      - 8001
        #  telemetry-backend-core:
        #    image: parity/substrate-telemetry-backend:05f165e1
        #    read_only: true
        #    command: [
        #      'telemetry_core',
        #      '--listen', '0.0.0.0:8000'
        #    ]
        #    ports:
        #      - 8000:8000
        #    expose:
        #      - 8000
        #  substrate-telemetry-exporter:
        #    image: web3f/substrate-telemetry-exporter:v2.1.0
        #    command: ['yarn', 'start']
        #    ports:
        #      - 3001:3000
        #    volumes:
        #      - ./substrate-telemetry-exporter/config/:/app/config/
        #    expose:
        #      - 3000
  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    restart: always
        #  node-exporter:
        #    image: prom/node-exporter
        #    volumes:
        #      - /proc:/host/proc:ro
        #      - /sys:/host/sys:ro
        #      - /:/rootfs:ro
        #    command:
        #      - '--path.procfs=/host/proc'
        #      - '--path.sysfs=/host/sys'
        #      - --collector.filesystem.ignored-mount-points
        #      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
        #    ports:
        #      - 9100:9100
        #    restart: always
        #    deploy:
        #      mode: global
        #
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
        ## not work in M1 MacOS
        #  cadvisor:
        #    image: gcr.io/cadvisor/cadvisor
        #    volumes:
        #      - /:/rootfs:ro
        #      - /var/run:/var/run:rw
        #      - /sys:/sys:ro
        #      - /var/lib/docker/:/var/lib/docker:ro
        #    ports:
        #      - 8080:8080
        #    restart: always
        #    deploy:
        #      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3003:3000
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    restart: always
